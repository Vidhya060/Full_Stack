import React, { useState } from "react"; const initialUsers = [
{ username: "alice" },
{ username: "bob" },
{ username: "carol" },
{ username: "dave" },
];
const initialPosts = [
{
id: 1,
author: "alice",
content: "Hello world! My first post!", image: null,
likes: 2,
comments: [{ id: 1, author: "bob", text: "Welcome!" }],
},
{
id: 2,
 
author: "bob",
content: "This is Bob's cool pic",
image: "https://placekitten.com/300/200", likes: 5,
comments: [],
},
];
function App() {
const [users] = useState(initialUsers);
const [loggedInUser] = useState(initialUsers[0]); // alice logged in
const [following, setFollowing] = useState(["bob"]); // alice follows bob initially const [posts, setPosts] = useState(initialPosts);
const [content, setContent] = useState("");
const [imageFile, setImageFile] = useState(null);
const [imagePreview, setImagePreview] = useState(null); const [commentTexts, setCommentTexts] = useState({}); const visiblePosts = posts.filter(
(p) => following.includes(p.author) || p.author === loggedInUser.username
);
// Handle image file select
const handleImageChange = (e) => { const file = e.target.files[0];
if (file) { setImageFile(file);
const previewURL = URL.createObjectURL(file); setImagePreview(previewURL);
} else { setImageFile(null); setImagePreview(null);
}
};
// Add new post
const addPost = () => {
if (!content.trim() && !imageFile) { alert("Add content or upload an image!"); return;
}
if (imageFile) {
// Convert image file to base64 data URL (async) const reader = new FileReader(); reader.onloadend = () => {
const base64Image = reader.result; createPost(base64Image);
};
reader.readAsDataURL(imageFile);
} else {
 
createPost(null);
}
};
const createPost = (imageDataUrl) => { const newPost = {
id: Date.now(),
author: loggedInUser.username, content,
image: imageDataUrl, likes: 0,
comments: [],
};
setPosts([newPost, ...posts]); setContent(""); setImageFile(null); setImagePreview(null);
};
const toggleLike = (postId) => { setPosts(
posts.map((p) =>
p.id === postId ? { ...p, likes: p.likes + 1 } : p
)
);
};
const addComment = (postId) => { const text = commentTexts[postId]; if (!text || !text.trim()) return; setPosts(
posts.map((p) => p.id === postId
? {
...p,
comments: [
...p.comments,
{
id: Date.now(),
author: loggedInUser.username, text: text.trim(),
},
],
}
: p
)
);
setCommentTexts({ ...commentTexts, [postId]: "" });
};
 
const toggleFollow = (username) => { if (following.includes(username)) {
setFollowing(following.filter((u) => u !== username));
} else {
setFollowing([...following, username]);
}
};
return (
<div className="app">
<header>
<h1>Microblog</h1>
<div className="user-info">Logged in as: @{loggedInUser.username}</div>
</header>
<main>
<section className="post-creator">
<h2>Create Post</h2>
<textarea
placeholder="What's on your mind?" value={content}
onChange={(e) => setContent(e.target.value)} rows={3}
/>
<input type="file" accept="image/*" onChange={handleImageChange} />
{imagePreview && (
<div className="image-preview">
<img src={imagePreview} alt="preview" />
<button onClick={() => {
setImageFile(null); setImagePreview(null);
}}
>
Remove Image
</button>
</div>
)}
<button onClick={addPost}>Post</button>
</section>
<section className="posts-feed">
<h2>Timeline</h2>
{visiblePosts.length === 0 && <p>No posts to show.</p>}
{visiblePosts.map((post) => (
<article key={post.id} className="post">
<div className="post-author">@{post.author}</div>
<p className="post-content">{post.content}</p>
{post.image && (
 
<img src={post.image} alt="post"
className="post-image"
onError={(e) => (e.target.style.display = "none")}
/>
)}
<div className="post-actions">
<button onClick={() => toggleLike(post.id)}>
üëç {post.likes}
</button>
</div>
<div className="comments-section">
<h4>Comments</h4>
{post.comments.length === 0 && <p>No comments yet.</p>}
<ul>
{post.comments.map((c) => (
<li key={c.id}>
<b>@{c.author}:</b> {c.text}
</li>
))}
</ul>
<input type="text"
placeholder="Write a comment..." value={commentTexts[post.id] || ""} onChange={(e) =>
setCommentTexts({ ...commentTexts, [post.id]: e.target.value })
}
onKeyDown={(e) => {
if (e.key === "Enter") addComment(post.id);
}}
/>
<button onClick={() => addComment(post.id)}>Comment</button>
</div>
</article>
))}
</section>
<section className="follow-section">
<h2>Suggested to follow</h2>
{users
.filter((u) => u.username !== loggedInUser.username)
.map((u) => {
const isFollowing = following.includes(u.username); return (
<div key={u.username} className="suggestion-item">
 
<span>@{u.username}</span>
<button
className={`follow-btn ${isFollowing ? "unfollow" : "follow"}`} onClick={() => toggleFollow(u.username)}
>
{isFollowing ? "Unfollow" : "Follow"}
</button>
</div>
);
})}
</section>
</main>
<style>{`
* {
box-sizing: border-box;
}
body, html, #root, .app { margin: 0; padding: 0;
height: 100%;
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #f0f2f5;
color: #333;
}
.app {
max-width: 900px; margin: 30px auto; padding: 15px; background: white; border-radius: 12px;
box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}
header { display: flex;
justify-content: space-between; align-items: center;
padding-bottom: 15px;
border-bottom: 2px solid #eee;
}
header h1 { margin: 0; color: #2c3e50;
font-weight: 900; font-size: 28px;
}
.user-info {
font-weight: 600;
 
font-size: 16px; color: #555;
}
main {
margin-top: 20px; display: grid;
grid-template-columns: 1fr 300px; gap: 30px;
}
section.post-creator, section.follow-section { background: #fafafa;
padding: 15px; border-radius: 10px;
box-shadow: inset 0 0 8px #ddd;
}
section.post-creator textarea { width: 100%;
border-radius: 8px; padding: 8px; resize: vertical; font-size: 14px;
border: 1px solid #ccc;
}
section.post-creator input[type="file"] { margin-top: 10px;
display: block;
}
.image-preview { margin-top: 10px; position: relative; display: inline-block;
}
.image-preview img { max-width: 300px; border-radius: 12px;
box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}
.image-preview button { position: absolute;
top: 4px; right: 4px;
background: #e74c3c; color: white;
border: none; border-radius: 50%; width: 26px;
 
height: 26px; font-weight: 900; cursor: pointer; line-height: 22px;
}
section.post-creator button { margin-top: 10px;
padding: 8px 18px; border: none; background: #3498db; color: white;
font-weight: 700; font-size: 15px; border-radius: 8px; cursor: pointer;
transition: background 0.3s ease;
}
section.post-creator button:hover { background: #2980b9;
}
section.posts-feed { grid-column: 1 / 2; max-height: 75vh; overflow-y: auto;
}
article.post { background: white; padding: 15px; margin-bottom: 20px; border-radius: 12px;
box-shadow: 0 3px 6px rgba(0,0,0,0.08);
}
.post-author { font-weight: 700; color: #34495e;
margin-bottom: 6px;
}
.post-content { font-size: 16px;
margin-bottom: 10px; white-space: pre-wrap;
}
.post-image {
max-width: 100%; border-radius: 10px; margin-bottom: 10px;
 
}
.post-actions button { background: #e1e4e8; border: none;
border-radius: 6px; padding: 6px 14px; cursor: pointer; font-weight: 700;
transition: background 0.2s ease;
}
.post-actions button:hover { background: #d1d7dd;
}
.comments-section { margin-top: 10px; font-size: 14px; color: #555;
}
.comments-section ul { list-style: none; padding-left: 0;
max-height: 140px; overflow-y: auto; margin-bottom: 10px;
border-top: 1px solid #ddd; padding-top: 8px;
}
.comments-section li { margin-bottom: 6px; word-wrap: break-word;
}
.comments-section input[type="text"] { width: 100%;
padding: 6px 10px; border-radius: 8px; border: 1px solid #ccc; margin-bottom: 6px;
}
.comments-section button { background: #27ae60; color: white;
border: none; padding: 6px 14px; border-radius: 8px; cursor: pointer; font-weight: 700;
 
transition: background 0.2s ease;
}
.comments-section button:hover { background: #1e8449;
}
section.follow-section .suggestion-item { display: flex;
justify-content: space-between; padding: 6px 0;
align-items: center;
border-bottom: 1px solid #eee;
}
.follow-btn { border: none; padding: 6px 12px; border-radius: 10px; cursor: pointer;
font-weight: 700;
transition: background 0.3s ease;
}
.follow-btn.follow { background: #2980b9; color: white;
}
.follow-btn.follow:hover { background: #1c5980;
}
.follow-btn.unfollow { background: #e74c3c; color: white;
}
.follow-btn.unfollow:hover { background: #b53026;
}
css Copy Edit
@media (max-width: 700px) { main {
grid-template-columns: 1fr;
}
section.follow-section { margin-top: 20px;
}
}
`}</style>
 
</div>
);
}
export default App;
